import FIFO::*;

interface Switch#(type t);
  method Action enq_a(t x); 
  method Action enq_b(t x); 
  method Action deq(); 
  method t first(); 
  method Action flip(); 
endinterface

(* synthesize *)
module mkSwitch(Switch#(Bit#(32)) ifc);
  
  Reg#(Bool) switch();
  mkReg#(False) the_switch(switch);

  FIFO#(Bit#(32)) a_in <- mkFIFO;
  FIFO#(Bit#(32)) b_in <- mkFIFO;
  FIFO#(Bit#(32)) out  <- mkFIFO;

  rule push_a(!switch);
     out.enq(a_in.first);
     a_in.deq;
  endrule

  rule push_b(switch);
     out.enq(b_in.first);
     b_in.deq;
  endrule

  method enq_a = a_in.enq;
  method enq_b = b_in.enq;
  method first = out.first;
  method deq   = out.deq;

  method Action flip();
    switch <= !switch;
  endmethod

endmodule



