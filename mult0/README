Bluespec Multiplier Lab Zero

TASKS

1. Examine the multiplier code in Mult0.bsv.
   You will find a syntax cheat-sheet at the end of this file.


2. Examine the available make targets:

        make help

   You can also examine what commands are invoked for any particular
   target using the '-n' flag for 'make'.  Example:

        make -n build


3. Compile and link the circuit to create a Verilog file for simulation.
        
        make SIM=iverilog link

   The Makefile supports several common simulators, where the default
   simulator is Bluesim.

   To use another simulator one can specify:

        make SIM=<simulator> link

   where <simulator> is one of vcs, vcsi ncverilog or cver.


4.  Repeat the example using the Bluespec Bluesim C-based simulator.  

        make link

   Then run the resulting executable:

        ./mkMult0

   The output should be:
     
        Product =         45

   You may examine the full range of options offered by the Bluesim simulator:

        ./mkMult0 -h


6. Produce a VCD file from Verilog simulation
   
   First, compile the circuit to create a Verilog file for simulation:

        make SIM=iverilog link

   Then run the simulation, using the +bscvcd flag to create the vcd file.

        ./mkMult0 +bscvcd

   Open the VCD in your favorite waveform viewer and examine the signals.  Note
   instantiation hierarchy and the enables and outputs of the registers.  Also
   note the rule firing signal(s), WILL_FIRE_RL_rulename.


7. Examine the Verilog file mkMult0.v.  Note:

     - the CLK and RST_N (active-low reset) signals introduced by bsc
     - register instantiations
     - assignments to register inputs (...$D_IN)
     - assignments to register enables (...$EN)

================================================================

SYNTAX CHEAT-SHEET

1. Comments:

     // line comment
     /* block comment */

2. Declaring a module:

     (* synthesize *)
     module moduleName();
       ... <module contents> ...
     endmodule: moduleName     // ": moduleName" optional

   The (* synthesize *) attribute ensures that moduleName will be compiled into
   a separate Verilog module (it would be inlined otherwise).

3. Instantiating a register "r", containing type int (= 32-bit), and reset to
   42, inside a module:

     Reg#(int) r <- mkReg(42); // shortcut for register instantiation

   alternately,

     // long form of register instantiation
     Reg#(int) r();            // instantiate interface; don't forget parens!
     mkReg#(42) r_instance(r); // instantiate module and connect to interface

4. Adding a rule to a module:

     rule ruleName(predicate); // (predicate) may be omitted (= True)
       ... <actions> ...
     endrule: ruleName         // ": ruleName" optional

5. Incrementing a register "r" in a rule:

     r <= r + 1;               // right-hand-side can be any expression

   (Note that "r = r + 1" will not work; why?)

6. Displaying the value of a register "r" (formatted as decimal) in a rule:

     $display("%d", r);        // %-formatting as in Verilog

7. Ending a simulation:

     $finish(0);

   This ends silently; if the argument is 1 or 2 instead, some closing
   information will be displayed too (depending on which simulator is being
   used).  Several "system tasks" (e.g. a $display and a $finish) may occur in
   the same action block:  although from the Bluespec point of view these
   happen in parallel, the simulators will give effect to them in their order
   in the source text.

